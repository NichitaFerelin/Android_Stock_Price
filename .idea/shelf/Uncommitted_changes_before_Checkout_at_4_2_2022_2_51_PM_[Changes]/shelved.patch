Index: core/data/src/main/kotlin/com/ferelin/core/data/repository/CryptoPriceRepositoryImpl.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.ferelin.core.data.repository\r\n\r\nimport com.ferelin.core.data.api.CRYPTOS_TOKEN\r\nimport com.ferelin.core.data.entity.cryptoPrice.CryptoPriceApi\r\nimport com.ferelin.core.data.entity.cryptoPrice.CryptoPriceDao\r\nimport com.ferelin.core.data.mapper.CryptoPriceMapper\r\nimport com.ferelin.core.domain.entity.Crypto\r\nimport com.ferelin.core.domain.entity.CryptoPrice\r\nimport com.ferelin.core.domain.repository.CryptoPriceRepository\r\nimport kotlinx.coroutines.flow.*\r\nimport javax.inject.Inject\r\nimport javax.inject.Named\r\n\r\ninternal class CryptoPriceRepositoryImpl @Inject constructor(\r\n  private val dao: CryptoPriceDao,\r\n  private val api: CryptoPriceApi,\r\n  @Named(CRYPTOS_TOKEN) private val token: String\r\n) : CryptoPriceRepository {\r\n  override val cryptoPrices: Flow<List<CryptoPrice>>\r\n    get() = dao.getAll()\r\n      .distinctUntilChanged()\r\n      .map { it.map(CryptoPriceMapper::map) }\r\n\r\n  override suspend fun fetchPriceFor(cryptos: List<Crypto>) {\r\n    try {\r\n      val cryptosContainer = cryptos.associateBy { it.ticker }\r\n      val requestParam = cryptos.joinToString(separator = \",\") { it.ticker }\r\n      val cryptosDbo = api.load(token, requestParam).map { pojo ->\r\n        CryptoPriceMapper.map(pojo, cryptosContainer[pojo.ticker]!!.id)\r\n      }\r\n      dao.insertAll(cryptosDbo)\r\n      fetchErrorState.emit(null)\r\n    } catch (e: Exception) {\r\n      fetchErrorState.emit(e)\r\n    }\r\n  }\r\n\r\n  private val fetchErrorState = MutableSharedFlow<Exception?>()\r\n  override val fetchError: Flow<Exception?> = fetchErrorState.asSharedFlow()\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/core/data/src/main/kotlin/com/ferelin/core/data/repository/CryptoPriceRepositoryImpl.kt b/core/data/src/main/kotlin/com/ferelin/core/data/repository/CryptoPriceRepositoryImpl.kt
--- a/core/data/src/main/kotlin/com/ferelin/core/data/repository/CryptoPriceRepositoryImpl.kt	(revision 4a479b1ac360a653329bb66df9925fb60d3d7647)
+++ b/core/data/src/main/kotlin/com/ferelin/core/data/repository/CryptoPriceRepositoryImpl.kt	(date 1648899991728)
@@ -14,7 +14,7 @@
 internal class CryptoPriceRepositoryImpl @Inject constructor(
   private val dao: CryptoPriceDao,
   private val api: CryptoPriceApi,
-  @Named(CRYPTOS_TOKEN) private val token: String
+  private val token: String
 ) : CryptoPriceRepository {
   override val cryptoPrices: Flow<List<CryptoPrice>>
     get() = dao.getAll()
Index: core/data/src/main/kotlin/com/ferelin/core/data/entity/news/NewsDb.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.ferelin.core.data.entity.news\r\n\r\nimport androidx.room.*\r\nimport kotlinx.coroutines.flow.Flow\r\n\r\n@Dao\r\ninternal interface NewsDao {\r\n  @Insert(onConflict = OnConflictStrategy.REPLACE)\r\n  suspend fun insertAll(newsDBO: List<NewsDBO>)\r\n\r\n  @Query(\"SELECT * FROM `news` WHERE companyId = :companyId\")\r\n  fun getAllBy(companyId: Int): Flow<List<NewsDBO>>\r\n\r\n  @Query(\"DELETE FROM `news` WHERE companyId = :companyId\")\r\n  suspend fun eraseAllBy(companyId: Int)\r\n}\r\n\r\n@Entity(tableName = NEWS_DB_TABLE)\r\ninternal data class NewsDBO(\r\n  @PrimaryKey\r\n<<<<<<< HEAD\r\n  val id: Long,\r\n=======\r\n  val id: String,\r\n>>>>>>> origin/koin_instead_of_dagger\r\n  val companyId: Int,\r\n  val headline: String,\r\n  val source: String,\r\n  val sourceUrl: String,\r\n  val summary: String,\r\n  val date: Long\r\n)\r\n\r\ninternal const val NEWS_DB_TABLE = \"news\"
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/core/data/src/main/kotlin/com/ferelin/core/data/entity/news/NewsDb.kt b/core/data/src/main/kotlin/com/ferelin/core/data/entity/news/NewsDb.kt
--- a/core/data/src/main/kotlin/com/ferelin/core/data/entity/news/NewsDb.kt	(revision 4a479b1ac360a653329bb66df9925fb60d3d7647)
+++ b/core/data/src/main/kotlin/com/ferelin/core/data/entity/news/NewsDb.kt	(date 1648900165043)
@@ -18,11 +18,7 @@
 @Entity(tableName = NEWS_DB_TABLE)
 internal data class NewsDBO(
   @PrimaryKey
-<<<<<<< HEAD
   val id: Long,
-=======
-  val id: String,
->>>>>>> origin/koin_instead_of_dagger
   val companyId: Int,
   val headline: String,
   val source: String,
Index: core/data/src/main/kotlin/com/ferelin/core/data/repository/NewsRepositoryImpl.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.ferelin.core.data.repository\r\n\r\nimport com.ferelin.core.data.api.STOCKS_TOKEN\r\nimport com.ferelin.core.data.entity.news.NewsApi\r\nimport com.ferelin.core.data.entity.news.NewsApiSpecifications\r\nimport com.ferelin.core.data.entity.news.NewsDao\r\nimport com.ferelin.core.data.mapper.NewsMapper\r\nimport com.ferelin.core.domain.entity.CompanyId\r\nimport com.ferelin.core.domain.entity.News\r\nimport com.ferelin.core.domain.repository.NewsRepository\r\nimport kotlinx.coroutines.flow.*\r\nimport javax.inject.Inject\r\nimport javax.inject.Named\r\n\r\ninternal class NewsRepositoryImpl @Inject constructor(\r\n  private val api: NewsApi,\r\n  private val dao: NewsDao,\r\n  @Named(STOCKS_TOKEN) private val token: String\r\n) : NewsRepository {\r\n  override fun getAllBy(companyId: CompanyId): Flow<List<News>> {\r\n    return dao.getAllBy(companyId.value)\r\n      .distinctUntilChanged()\r\n      .map { it.map(NewsMapper::map) }\r\n  }\r\n\r\n  override suspend fun fetchNews(companyId: CompanyId, companyTicker: String) {\r\n    try {\r\n      val response = api\r\n        .load(token, companyTicker)\r\n        .map(NewsApiSpecifications::convertToUnixTime)\r\n\r\n      dao.eraseAllBy(companyId.value)\r\n      dao.insertAll(NewsMapper.map(response, companyId))\r\n      fetchErrorState.value = null\r\n    } catch (e: Exception) {\r\n      fetchErrorState.value = e\r\n    }\r\n  }\r\n\r\n  private val fetchErrorState = MutableStateFlow<Exception?>(null)\r\n  override val fetchError: Flow<Exception?> = fetchErrorState.asStateFlow()\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/core/data/src/main/kotlin/com/ferelin/core/data/repository/NewsRepositoryImpl.kt b/core/data/src/main/kotlin/com/ferelin/core/data/repository/NewsRepositoryImpl.kt
--- a/core/data/src/main/kotlin/com/ferelin/core/data/repository/NewsRepositoryImpl.kt	(revision 4a479b1ac360a653329bb66df9925fb60d3d7647)
+++ b/core/data/src/main/kotlin/com/ferelin/core/data/repository/NewsRepositoryImpl.kt	(date 1648900005985)
@@ -1,6 +1,5 @@
 package com.ferelin.core.data.repository
 
-import com.ferelin.core.data.api.STOCKS_TOKEN
 import com.ferelin.core.data.entity.news.NewsApi
 import com.ferelin.core.data.entity.news.NewsApiSpecifications
 import com.ferelin.core.data.entity.news.NewsDao
@@ -10,12 +9,11 @@
 import com.ferelin.core.domain.repository.NewsRepository
 import kotlinx.coroutines.flow.*
 import javax.inject.Inject
-import javax.inject.Named
 
 internal class NewsRepositoryImpl @Inject constructor(
   private val api: NewsApi,
   private val dao: NewsDao,
-  @Named(STOCKS_TOKEN) private val token: String
+  private val token: String
 ) : NewsRepository {
   override fun getAllBy(companyId: CompanyId): Flow<List<News>> {
     return dao.getAllBy(companyId.value)
